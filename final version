/* Question 1 - What are the most popular types of movies, what is their number of rentals, their titles and category?*/
/* answer 1*/

SELECT COUNT(r.rental_date) AS rental_qty, tab.title, tab.name AS category
FROM rental r
JOIN inventory i
ON i.inventory_id = r.inventory_id
JOIN (SELECT c.name AS name, f.title AS title, f.film_id AS film_id
FROM category c
JOIN film_category fc
ON c.category_id = fc.category_id
JOIN film f
ON f.film_id = fc.film_id) tab
ON tab.film_id = i.film_id
GROUP BY 2, 3
ORDER BY 1 DESC
LIMIT 10;

/* Task 2  - Find 10 most active users. Give their full name, customer ID and quantity of rentals depending on favourite film category..*/
/* answer 2*/


WITH
    sum_of_category
    as
    (
        SELECT DISTINCT CONCAT(cu.first_name, ' ', cu.last_name) AS full_name,
        cu.customer_id, c.name AS category,
        COUNT(r.rental_date) as rental_qty
        FROM payment p
        JOIN rental r ON r.rental_id = p.rental_id
        JOIN inventory i ON i.inventory_id = r.inventory_id
        JOIN film f ON f.film_id = i.film_id
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN category c ON c.category_id = fc.category_id
        JOIN customer cu ON cu.customer_id = r.customer_id
        GROUP BY 1, 2, 3, r.customer_id
        ORDER BY customer_id, rental_qty DESC
    )

SELECT *
FROM sum_of_category sc
order by rental_qty desc
LIMIT 100;

/* Task 3  - Find 10 users that spent the most on movies depending on category. Give their full name, customer ID, film category and amount of money.*/
/* answer 3*/

WITH sum_of_category as
(SELECT cu.customer_id,
       CONCAT(cu.first_name, ' ', cu.last_name) AS full_name,
       c.name AS category,
       sum(p.amount) as sum,
       row_number() over(partition by cu.customer_id order by sum(p.amount) desc) as check
    FROM payment p
    JOIN rental r
        ON r.rental_id = p.rental_id
    JOIN inventory i
        ON i.inventory_id = r.inventory_id
    JOIN film f
        ON f.film_id = i.film_id
    JOIN film_category fc
        ON f.film_id = fc.film_id
    JOIN category c
        ON c.category_id = fc.category_id
   JOIN customer cu
   ON cu.customer_id = r.customer_id
   GROUP BY 1, 3
   ORDER BY customer_id, sum desc)

SELECT *
FROM sum_of_category sc
WHERE sc.check = 1
order by sc.sum desc
LIMIT 10;

/* Task 4  - Estimate what percentage of total income, depending on film category, is generated by those ten most active users. .*/
/* answer 4*/

WITH sub3 AS (SELECT tab.name AS category, tab.total_usd AS total_usd, tab.name AS name
          FROM (SELECT SUM(p.amount) AS total_usd, c.category_id, c.name AS name
                      FROM payment p
                      JOIN rental r
                      ON r.rental_id = p.rental_id
                      JOIN inventory i
                      ON i.inventory_id = r.inventory_id
                      JOIN film f
                      ON f.film_id = i.film_id
                      JOIN film_category fc
                      ON f.film_id = fc.category_id
                      JOIN category c
                      ON c.category_id = fc.category_id
                      GROUP BY 2, 3
                      ORDER BY 1 DESC) AS tab
          ORDER BY 1 DESC)


SELECT sub4.customer_id, sub3.category, sub3.total_usd AS total_usd, sub4.sum AS total_cost_per_user, (sub4.sum)/(total_usd)*100 AS percent_of_income
FROM    sub3

JOIN      (WITH sum_of_category as
	(SELECT cu.customer_id AS customer_id,
       c.name AS name,
       sum(p.amount) as sum,
       row_number() over(partition by cu.customer_id order by sum(p.amount) desc) as check
    FROM payment p
    JOIN rental r
        ON r.rental_id = p.rental_id
    JOIN inventory i
        ON i.inventory_id = r.inventory_id
    JOIN film f
        ON f.film_id = i.film_id
    JOIN film_category fc
        ON f.film_id = fc.film_id
    JOIN category c
        ON c.category_id = fc.category_id
   JOIN customer cu
   ON cu.customer_id = r.customer_id
   GROUP BY 1, 2
   ORDER BY customer_id, sum desc)

SELECT *
FROM sum_of_category sc
WHERE sc.check = 1
order by sc.sum desc
LIMIT 10
          ) sub4
ON sub3.name = sub4.name
ORDER BY 5 DESC;
